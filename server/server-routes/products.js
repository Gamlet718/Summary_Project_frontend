const express = require('express');
const fs = require('fs').promises;
const path = require('path');
const { v4: uuidv4 } = require('uuid');

const router = express.Router();
const DATA_FILE = path.join(__dirname, '../data/products.json');

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
const readProducts = async () => {
  try {
    const data = await fs.readFile(DATA_FILE, 'utf8');
    return JSON.parse(data);
  } catch (error) {
    // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    if (error.code === 'ENOENT') {
      await writeProducts([]);
      return [];
    }
    throw error;
  }
};

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö
const writeProducts = async (products) => {
  // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  const dir = path.dirname(DATA_FILE);
  await fs.mkdir(dir, { recursive: true });
  
  await fs.writeFile(DATA_FILE, JSON.stringify(products, null, 2), 'utf8');
};

// –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞
const validateProduct = (product) => {
  const errors = [];
  
  if (!product.name || product.name.trim().length === 0) {
    errors.push('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
  }
  
  if (!product.description || product.description.trim().length === 0) {
    errors.push('–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
  }
  
  if (!product.price || isNaN(product.price) || parseFloat(product.price) <= 0) {
    errors.push('–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º');
  }
  
  if (!product.category || product.category.trim().length === 0) {
    errors.push('–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞');
  }
  
  if (product.quantity === undefined || isNaN(product.quantity) || parseInt(product.quantity) < 0) {
    errors.push('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º');
  }
  
  return errors;
};

// GET /api/products - –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
router.get('/', async (req, res) => {
  try {
    const products = await readProducts();
    res.json({
      success: true,
      data: products,
      count: products.length
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤',
      error: error.message
    });
  }
});

// GET /api/products/:id - –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ ID
router.get('/:id', async (req, res) => {
  try {
    const products = await readProducts();
    const product = products.find(p => p.id === req.params.id);
    
    if (!product) {
      return res.status(404).json({
        success: false,
        message: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }
    
    res.json({
      success: true,
      data: product
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞',
      error: error.message
    });
  }
});

// POST /api/products - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
router.post('/', async (req, res) => {
  try {
    const productData = req.body;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    const errors = validateProduct(productData);
    if (errors.length > 0) {
      return res.status(400).json({
        success: false,
        message: '–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
        errors: errors
      });
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
    const newProduct = {
      id: uuidv4(),
      name: productData.name.trim(),
      description: productData.description.trim(),
      price: parseFloat(productData.price),
      category: productData.category.trim(),
      brand: productData.brand ? productData.brand.trim() : '',
      quantity: parseInt(productData.quantity),
      image: productData.image || '',
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    };
    
    // –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
    const products = await readProducts();
    products.push(newProduct);
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    await writeProducts(products);
    
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä: ${newProduct.name} (ID: ${newProduct.id})`);
    
    res.status(201).json({
      success: true,
      message: '–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
      data: newProduct
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞',
      error: error.message
    });
  }
});

// PUT /api/products/:id - –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
router.put('/:id', async (req, res) => {
  try {
    const productId = req.params.id;
    const updateData = req.body;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    const errors = validateProduct(updateData);
    if (errors.length > 0) {
      return res.status(400).json({
        success: false,
        message: '–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
        errors: errors
      });
    }
    
    const products = await readProducts();
    const productIndex = products.findIndex(p => p.id === productId);
    
    if (productIndex === -1) {
      return res.status(404).json({
        success: false,
        message: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
    const updatedProduct = {
      ...products[productIndex],
      name: updateData.name.trim(),
      description: updateData.description.trim(),
      price: parseFloat(updateData.price),
      category: updateData.category.trim(),
      brand: updateData.brand ? updateData.brand.trim() : '',
      quantity: parseInt(updateData.quantity),
      image: updateData.image || '',
      updatedAt: new Date().toISOString()
    };
    
    products[productIndex] = updatedProduct;
    await writeProducts(products);
    
    console.log(`‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä: ${updatedProduct.name} (ID: ${productId})`);
    
    res.json({
      success: true,
      message: '–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
      data: updatedProduct
    });
    
  } catch (error) {
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞',
      error: error.message
    });
  }
});

// DELETE /api/products/:id - –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä
router.delete('/:id', async (req, res) => {
  try {
    const productId = req.params.id;
    const products = await readProducts();
    const productIndex = products.findIndex(p => p.id === productId);
    
    if (productIndex === -1) {
      return res.status(404).json({
        success: false,
        message: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }
    
    const deletedProduct = products[productIndex];
    products.splice(productIndex, 1);
    await writeProducts(products);
    
    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ç–æ–≤–∞—Ä: ${deletedProduct.name} (ID: ${productId})`);
    
    res.json({
      success: true,
      message: '–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω',
      data: deletedProduct
    });
    
  } catch (error) {
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞',
      error: error.message
    });
  }
});

module.exports = router;
